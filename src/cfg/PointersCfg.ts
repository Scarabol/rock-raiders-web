import {CfgHelper} from "./CfgHelper";

export type Cursor = keyof PointersCfg

export class PointersCfg {
    blank: PointersEntryCfg = new PointersEntryCfg()
    standard: PointersEntryCfg = new PointersEntryCfg()
    drill: PointersEntryCfg = new PointersEntryCfg()
    cantDrill: PointersEntryCfg = new PointersEntryCfg()
    clear: PointersEntryCfg = new PointersEntryCfg()
    go: PointersEntryCfg = new PointersEntryCfg()
    cantGo: PointersEntryCfg = new PointersEntryCfg()
    teleport: PointersEntryCfg = new PointersEntryCfg()
    cantTeleport: PointersEntryCfg = new PointersEntryCfg()
    reinforce: PointersEntryCfg = new PointersEntryCfg()
    cantReinforce: PointersEntryCfg = new PointersEntryCfg()
    selected: PointersEntryCfg = new PointersEntryCfg()
    radarPan: PointersEntryCfg = new PointersEntryCfg()
    trackObject: PointersEntryCfg = new PointersEntryCfg()
    zoom: PointersEntryCfg = new PointersEntryCfg()
    cantZoom: PointersEntryCfg = new PointersEntryCfg()
    help: PointersEntryCfg = new PointersEntryCfg()
    cantHelp: PointersEntryCfg = new PointersEntryCfg()
    putDown: PointersEntryCfg = new PointersEntryCfg()
    getIn: PointersEntryCfg = new PointersEntryCfg()
    getOut: PointersEntryCfg = new PointersEntryCfg()
    okay: PointersEntryCfg = new PointersEntryCfg()
    notOkay: PointersEntryCfg = new PointersEntryCfg()
    canBuild: PointersEntryCfg = new PointersEntryCfg()
    cannotBuild: PointersEntryCfg = new PointersEntryCfg()
    dynamite: PointersEntryCfg = new PointersEntryCfg()
    cantDynamite: PointersEntryCfg = new PointersEntryCfg()
    pickUp: PointersEntryCfg = new PointersEntryCfg()
    cantPickUp: PointersEntryCfg = new PointersEntryCfg()
    pickUpOre: PointersEntryCfg = new PointersEntryCfg()
    manCantDig: PointersEntryCfg = new PointersEntryCfg()
    vehicleCantDig: PointersEntryCfg = new PointersEntryCfg()
    manDig: PointersEntryCfg = new PointersEntryCfg()
    vehicleDig: PointersEntryCfg = new PointersEntryCfg()
    manCantPickUp: PointersEntryCfg = new PointersEntryCfg()
    vehicleCantPickUp: PointersEntryCfg = new PointersEntryCfg()
    manPickUp: PointersEntryCfg = new PointersEntryCfg()
    vehiclePickUp: PointersEntryCfg = new PointersEntryCfg()
    manCantGo: PointersEntryCfg = new PointersEntryCfg()
    vehicleCantGo: PointersEntryCfg = new PointersEntryCfg()
    manGo: PointersEntryCfg = new PointersEntryCfg()
    vehicleGo: PointersEntryCfg = new PointersEntryCfg()
    manClear: PointersEntryCfg = new PointersEntryCfg()
    vehicleClear: PointersEntryCfg = new PointersEntryCfg()
    surfaceTypeImmovable: PointersEntryCfg = new PointersEntryCfg()
    surfaceTypeHard: PointersEntryCfg = new PointersEntryCfg()
    surfaceTypeMedium: PointersEntryCfg = new PointersEntryCfg()
    surfaceTypeLoose: PointersEntryCfg = new PointersEntryCfg()
    surfaceTypeSoil: PointersEntryCfg = new PointersEntryCfg()
    surfaceTypeOreSeam: PointersEntryCfg = new PointersEntryCfg()
    surfaceTypeCrystalSeam: PointersEntryCfg = new PointersEntryCfg()
    surfaceTypeRechargeSeam: PointersEntryCfg = new PointersEntryCfg()

    setFromValue(cfgValue: Record<string, PointersEntryValue>): void {
        this.blank.setFromValue(CfgHelper.getValue(cfgValue, 'blank'))
        this.standard.setFromValue(CfgHelper.getValue(cfgValue, 'standard'))
        this.drill.setFromValue(CfgHelper.getValue(cfgValue, 'drill'))
        this.cantDrill.setFromValue(CfgHelper.getValue(cfgValue, 'cantDrill'))
        this.clear.setFromValue(CfgHelper.getValue(cfgValue, 'clear'))
        this.go.setFromValue(CfgHelper.getValue(cfgValue, 'go'))
        this.cantGo.setFromValue(CfgHelper.getValue(cfgValue, 'cantGo'))
        this.teleport.setFromValue(CfgHelper.getValue(cfgValue, 'teleport'))
        this.cantTeleport.setFromValue(CfgHelper.getValue(cfgValue, 'cantTeleport'))
        this.reinforce.setFromValue(CfgHelper.getValue(cfgValue, 'reinforce'))
        this.cantReinforce.setFromValue(CfgHelper.getValue(cfgValue, 'cantReinforce'))
        this.selected.setFromValue(CfgHelper.getValue(cfgValue, 'selected'))
        this.radarPan.setFromValue(CfgHelper.getValue(cfgValue, 'radarPan'))
        this.trackObject.setFromValue(CfgHelper.getValue(cfgValue, 'trackObject'))
        this.zoom.setFromValue(CfgHelper.getValue(cfgValue, 'zoom'))
        this.cantZoom.setFromValue(CfgHelper.getValue(cfgValue, 'cantZoom'))
        this.help.setFromValue(CfgHelper.getValue(cfgValue, 'help'))
        this.cantHelp.setFromValue(CfgHelper.getValue(cfgValue, 'cantHelp'))
        this.putDown.setFromValue(CfgHelper.getValue(cfgValue, 'putDown'))
        this.getIn.setFromValue(CfgHelper.getValue(cfgValue, 'getIn'))
        this.getOut.setFromValue(CfgHelper.getValue(cfgValue, 'getOut'))
        this.okay.setFromValue(CfgHelper.getValue(cfgValue, 'okay'))
        this.notOkay.setFromValue(CfgHelper.getValue(cfgValue, 'notOkay'))
        this.canBuild.setFromValue(CfgHelper.getValue(cfgValue, 'canBuild'))
        this.cannotBuild.setFromValue(CfgHelper.getValue(cfgValue, 'cannotBuild'))
        this.dynamite.setFromValue(CfgHelper.getValue(cfgValue, 'dynamite'))
        this.cantDynamite.setFromValue(CfgHelper.getValue(cfgValue, 'cantDynamite'))
        this.pickUp.setFromValue(CfgHelper.getValue(cfgValue, 'pickUp'))
        this.cantPickUp.setFromValue(CfgHelper.getValue(cfgValue, 'cantPickUp'))
        this.pickUpOre.setFromValue(CfgHelper.getValue(cfgValue, 'pickUpOre'))
        this.manCantDig.setFromValue(CfgHelper.getValue(cfgValue, 'manCantDig'))
        this.vehicleCantDig.setFromValue(CfgHelper.getValue(cfgValue, 'vehicleCantDig'))
        this.manDig.setFromValue(CfgHelper.getValue(cfgValue, 'manDig'))
        this.vehicleDig.setFromValue(CfgHelper.getValue(cfgValue, 'vehicleDig'))
        this.manCantPickUp.setFromValue(CfgHelper.getValue(cfgValue, 'manCantPickUp'))
        this.vehicleCantPickUp.setFromValue(CfgHelper.getValue(cfgValue, 'vehicleCantPickUp'))
        this.manPickUp.setFromValue(CfgHelper.getValue(cfgValue, 'manPickUp'))
        this.vehiclePickUp.setFromValue(CfgHelper.getValue(cfgValue, 'vehiclePickUp'))
        this.manCantGo.setFromValue(CfgHelper.getValue(cfgValue, 'manCantGo'))
        this.vehicleCantGo.setFromValue(CfgHelper.getValue(cfgValue, 'vehicleCantGo'))
        this.manGo.setFromValue(CfgHelper.getValue(cfgValue, 'manGo'))
        this.vehicleGo.setFromValue(CfgHelper.getValue(cfgValue, 'vehicleGo'))
        this.manClear.setFromValue(CfgHelper.getValue(cfgValue, 'manClear'))
        this.vehicleClear.setFromValue(CfgHelper.getValue(cfgValue, 'vehicleClear'))
        this.surfaceTypeImmovable.setFromValue(CfgHelper.getValue(cfgValue, 'surfaceTypeImmovable'))
        this.surfaceTypeHard.setFromValue(CfgHelper.getValue(cfgValue, 'surfaceTypeHard'))
        this.surfaceTypeMedium.setFromValue(CfgHelper.getValue(cfgValue, 'surfaceTypeMedium'))
        this.surfaceTypeLoose.setFromValue(CfgHelper.getValue(cfgValue, 'surfaceTypeLoose'))
        this.surfaceTypeSoil.setFromValue(CfgHelper.getValue(cfgValue, 'surfaceTypeSoil'))
        this.surfaceTypeOreSeam.setFromValue(CfgHelper.getValue(cfgValue, 'surfaceTypeOreSeam'))
        this.surfaceTypeCrystalSeam.setFromValue(CfgHelper.getValue(cfgValue, 'surfaceTypeCrystalSeam'))
        this.surfaceTypeRechargeSeam.setFromValue(CfgHelper.getValue(cfgValue, 'surfaceTypeRechargeSeam'))
    }
}

type PointersEntryValue = string | [string, number, number]

export class PointersEntryCfg {
    fileName: string = ''
    flhStart: number = 0
    flhEnd: number = 0

    setFromValue(cfgValue: PointersEntryValue) {
        if (Array.isArray(cfgValue)) {
            this.fileName = CfgHelper.assertString(cfgValue[0])
            this.flhStart = CfgHelper.assertNumber(cfgValue[1])
            this.flhEnd = CfgHelper.assertNumber(cfgValue[2])
        } else {
            this.fileName = CfgHelper.assertString(cfgValue)
        }
    }
}
