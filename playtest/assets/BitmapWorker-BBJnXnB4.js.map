{"version":3,"file":"BitmapWorker-BBJnXnB4.js","sources":["../src/worker/TypedWorker.ts","../src/resource/fileparser/BitmapWithPalette.ts","../src/worker/AbstractWorkerSystem.ts","../src/worker/BitmapWorker.ts"],"sourcesContent":["export interface WorkerRequestMessage<T> {\n    workerRequestHash: string\n    request: T\n}\n\nexport interface WorkerResponseMessage<T> {\n    workerRequestHash: string\n    response: T\n}\n\nexport interface TypedWorker<M> {\n    sendMessage(message: M, transfer?: (Transferable | OffscreenCanvas)[]): void\n\n    terminate(): void\n}\n\nexport class TypedWorkerFrontend<M, R> implements TypedWorker<M> {\n    constructor(readonly worker: Worker, onResponseFromWorker: (response: R) => void) {\n        worker.onmessage = (event) => {\n            onResponseFromWorker(event?.data)\n        }\n        worker.onerror = (event) => {\n            console.error(`Unexpected error event in worker`, event)\n        }\n    }\n\n    sendMessage(message: M, transfer?: (Transferable | OffscreenCanvas)[]) {\n        this.worker.postMessage(message, transfer)\n    }\n\n    terminate() {\n        this.worker.terminate()\n    }\n}\n\nexport interface TypedWorkerBackend<M, R> {\n    onMessageFromFrontend: (message: M) => void\n\n    sendResponse(response: R, transfer?: Transferable[]): void\n}\n\nexport class TypedWorkerThreaded<M, R> implements TypedWorkerBackend<M, R> {\n    onMessageFromFrontend: (message: M) => void = () => {\n        throw new Error('Not implemented')\n    }\n\n    constructor(readonly worker: Worker) {\n        worker.addEventListener('message', (event) => this.onMessageFromFrontend(event?.data))\n    }\n\n    sendResponse(response: R, transfer?: Transferable[]) {\n        this.worker.postMessage(response, transfer)\n    }\n}\n\nexport class TypedWorkerFallback<M, R> implements TypedWorker<M>, TypedWorkerBackend<M, R> {\n    onMessageFromFrontend: (message: M) => void = () => {\n        throw new Error('Not implemented')\n    }\n\n    constructor(readonly onResponseFromWorker: (response: R) => void) {\n    }\n\n    sendMessage(message: M, _transfer?: (Transferable | OffscreenCanvas)[]) {\n        this.onMessageFromFrontend(message)\n    }\n\n    sendResponse(response: R) {\n        this.onResponseFromWorker(response)\n    }\n\n    terminate() {\n    }\n}\n","/**\n * Source: https://github.com/wokwi/bmp-ts\n */\n\nconst HEADER_TYPE = {\n    BitmapInfoHeader: 40,\n    BitmapV2InfoHeader: 52,\n    BitmapV3InfoHeader: 56,\n    BitmapV4Header: 108,\n    BitmapV5Header: 124\n} as const\ntype HeaderType = typeof HEADER_TYPE[keyof typeof HEADER_TYPE]\nconst isHeaderType = (val: unknown): val is HeaderType => {\n    return Object.values(HEADER_TYPE).includes(val as HeaderType)\n}\n\n// We have these:\n//\n// const sample = 0101 0101 0101 0101\n// const mask   = 0111 1100 0000 0000\n// 256        === 0000 0001 0000 0000\n//\n// We want to take the sample and turn it into an 8-bit value.\n//\n// 1. We extract the last bit of the mask:\n//\n// 0000 0100 0000 0000\n//       ^\n//\n// Like so:\n//\n// const a = ~mask =    1000 0011 1111 1111\n// const b = a + 1 =    1000 0100 0000 0000\n// const c = b & mask = 0000 0100 0000 0000\n//\n// 2. We shift it to the right and extract the bit before the first:\n//\n// 0000 0000 0010 0000\n//             ^\n//\n// Like so:\n//\n// const d = mask / c = 0000 0000 0001 1111\n// const e = mask + 1 = 0000 0000 0010 0000\n//\n// 3. We apply the mask and the two values above to a sample:\n//\n// const f = sample & mask = 0101 0100 0000 0000\n// const g = f / c =         0000 0000 0001 0101\n// const h = 256 / e =       0000 0000 0000 0100\n// const i = g * h =         0000 0000 1010 1000\n//                                     ^^^^ ^\n//\n// Voila, we have extracted a sample and \"stretched\" it to 8 bits. For samples\n// which are already 8-bit, h === 1 and g === i.\n\nfunction maskColor(\n    maskRed: number,\n    maskGreen: number,\n    maskBlue: number,\n    maskAlpha: number,\n) {\n    const maskRedR = (~maskRed + 1) & maskRed\n    const maskGreenR = (~maskGreen + 1) & maskGreen\n    const maskBlueR = (~maskBlue + 1) & maskBlue\n    const maskAlphaR = (~maskAlpha + 1) & maskAlpha\n\n    const shiftedMaskRedL = maskRed / maskRedR + 1\n    const shiftedMaskGreenL = maskGreen / maskGreenR + 1\n    const shiftedMaskBlueL = maskBlue / maskBlueR + 1\n    const shiftedMaskAlphaL = maskAlpha / maskAlphaR + 1\n\n    return {\n        shiftRed: (x: number) =>\n            (((x & maskRed) / maskRedR) * 0x100) / shiftedMaskRedL,\n        shiftGreen: (x: number) =>\n            (((x & maskGreen) / maskGreenR) * 0x100) / shiftedMaskGreenL,\n        shiftBlue: (x: number) =>\n            (((x & maskBlue) / maskBlueR) * 0x100) / shiftedMaskBlueL,\n        shiftAlpha:\n            maskAlpha !== 0\n                ? (x: number) => (((x & maskAlpha) / maskAlphaR) * 0x100) / shiftedMaskAlphaL\n                : () => 255,\n    }\n}\n\nconst Compression = {\n    NONE: 0,\n    BI_RLE8: 1,\n    BI_RLE4: 2,\n    BI_BIT_FIELDS: 3,\n    BI_ALPHA_BIT_FIELDS: 6\n} as const\ntype Compression = typeof Compression[keyof typeof Compression]\nconst isCompression = (val: unknown): val is Compression => {\n    return Object.values(Compression).includes(val as Compression)\n}\n\ntype BitsPerPixel = 1 | 4 | 8 | 16 | 24 | 32;\n\ninterface IColor {\n    red: number;\n    green: number;\n    blue: number;\n    quad: number;\n}\n\ninterface IDecoderOptions {\n    toRGBA?: boolean;\n}\n\ninterface IImage {\n    width: number;\n    height: number;\n    bitPP: BitsPerPixel;\n    data: Uint8Array;\n    reserved1?: number;\n    reserved2?: number;\n    hr?: number;\n    vr?: number;\n    colors?: number;\n    importantColors?: number;\n    palette?: IColor[];\n}\n\ninterface IBitmapImage extends IImage {\n    flag: string;\n    fileSize: number;\n    offset: number;\n    headerSize: number;\n    planes?: number;\n    compression?: Compression;\n    rawSize: number;\n}\n\ntype IColorProcessor = (x: number, line: number) => void;\n\nclass BmpDecoder implements IBitmapImage {\n    // Header\n    public flag: string\n    public fileSize!: number\n    public reserved1!: number\n    public reserved2!: number\n    public offset!: number\n    public headerSize!: HeaderType\n    public width!: number\n    public height!: number\n    public planes!: number\n    public bitPP!: BitsPerPixel\n    public compression?: Compression\n    public rawSize!: number\n    public hr!: number\n    public vr!: number\n    public colors!: number\n    public importantColors!: number\n    public palette!: IColor[]\n    public data!: Uint8Array\n\n    private maskRed!: number\n    private maskGreen!: number\n    private maskBlue!: number\n    private maskAlpha!: number\n\n    private readonly toRGBA: boolean\n\n    private pos: number\n    private bottomUp: boolean\n\n    private readonly locRed: number\n    private readonly locGreen: number\n    private readonly locBlue: number\n    private readonly locAlpha: number\n\n    private shiftRed!: (x: number) => number\n    private shiftGreen!: (x: number) => number\n    private shiftBlue!: (x: number) => number\n    private shiftAlpha!: (x: number) => number\n\n    constructor(\n        readonly bufferView: DataView,\n        {toRGBA}: IDecoderOptions = {toRGBA: false},\n    ) {\n        this.toRGBA = !!toRGBA\n        this.bottomUp = true\n        this.flag = String.fromCharCode(this.bufferView.getUint8(0), this.bufferView.getUint8(1))\n        this.pos = 2\n\n        if (this.flag !== 'BM') {\n            throw new Error('Invalid BMP File')\n        }\n\n        this.locRed = this.toRGBA ? 0 : 3\n        this.locGreen = this.toRGBA ? 1 : 2\n        this.locBlue = this.toRGBA ? 2 : 1\n        this.locAlpha = this.toRGBA ? 3 : 0\n\n        this.parseHeader()\n        this.parseRGBA()\n    }\n\n    private parseHeader() {\n        this.fileSize = this.readUInt32LE()\n\n        this.reserved1 = this.bufferView.getUint16(this.pos, true)\n        this.pos += 2\n        this.reserved2 = this.bufferView.getUint16(this.pos, true)\n        this.pos += 2\n\n        this.offset = this.readUInt32LE()\n\n        // End of BITMAP_FILE_HEADER\n        const headerSize = this.readUInt32LE()\n        if (!isHeaderType(headerSize)) throw new Error(`Unsupported BMP header size ${headerSize}`)\n        this.headerSize = headerSize\n\n        this.width = this.readUInt32LE()\n        this.height = this.readUInt32LE()\n\n        this.planes = this.bufferView.getUint16(this.pos, true)\n        this.pos += 2\n        this.bitPP = this.bufferView.getUint16(this.pos, true) as BitsPerPixel\n        this.pos += 2\n\n        const compression = this.readUInt32LE()\n        if (!isCompression(compression)) throw new Error(`Unsupported BMP compression ${compression}`)\n        this.compression = compression\n\n        this.rawSize = this.readUInt32LE()\n        this.hr = this.readUInt32LE()\n        this.vr = this.readUInt32LE()\n        this.colors = this.readUInt32LE()\n        this.importantColors = this.readUInt32LE()\n\n        // De facto defaults\n\n        if (this.bitPP === 32) {\n            this.maskAlpha = 0\n            this.maskRed = 0x00ff0000\n            this.maskGreen = 0x0000ff00\n            this.maskBlue = 0x000000ff\n        } else if (this.bitPP === 16) {\n            this.maskAlpha = 0\n            this.maskRed = 0x7c00\n            this.maskGreen = 0x03e0\n            this.maskBlue = 0x001f\n        }\n\n        // End of BITMAP_INFO_HEADER\n\n        if (\n            this.headerSize > HEADER_TYPE.BitmapInfoHeader ||\n            this.compression === Compression.BI_BIT_FIELDS ||\n            this.compression === Compression.BI_ALPHA_BIT_FIELDS\n        ) {\n            this.maskRed = this.readUInt32LE()\n            this.maskGreen = this.readUInt32LE()\n            this.maskBlue = this.readUInt32LE()\n        }\n\n        // End of BITMAP_V2_INFO_HEADER\n\n        if (\n            this.headerSize > HEADER_TYPE.BitmapV2InfoHeader ||\n            this.compression === Compression.BI_ALPHA_BIT_FIELDS\n        ) {\n            this.maskAlpha = this.readUInt32LE()\n        }\n\n        // End of BITMAP_V3_INFO_HEADER\n\n        if (this.headerSize > HEADER_TYPE.BitmapV3InfoHeader) {\n            this.pos +=\n                HEADER_TYPE.BitmapV4Header - HEADER_TYPE.BitmapV3InfoHeader\n        }\n\n        // End of BITMAP_V4_HEADER\n\n        if (this.headerSize > HEADER_TYPE.BitmapV4Header) {\n            this.pos += HEADER_TYPE.BitmapV5Header - HEADER_TYPE.BitmapV4Header\n        }\n\n        // End of BITMAP_V5_HEADER\n\n        if (this.bitPP <= 8 || this.colors > 0) {\n            const len = this.colors === 0 ? 1 << this.bitPP : this.colors\n            this.palette = new Array(len)\n\n            for (let i = 0; i < len; i++) {\n                const blue = this.bufferView.getUint8(this.pos++)\n                const green = this.bufferView.getUint8(this.pos++)\n                const red = this.bufferView.getUint8(this.pos++)\n                const quad = this.bufferView.getUint8(this.pos++)\n\n                this.palette[i] = {\n                    red,\n                    green,\n                    blue,\n                    quad,\n                }\n            }\n        }\n\n        // End of color table\n\n        // Can the height ever be negative?\n        if (this.height < 0) {\n            this.height *= -1\n            this.bottomUp = false\n        }\n\n        const coloShift = maskColor(\n            this.maskRed,\n            this.maskGreen,\n            this.maskBlue,\n            this.maskAlpha,\n        )\n\n        this.shiftRed = coloShift.shiftRed\n        this.shiftGreen = coloShift.shiftGreen\n        this.shiftBlue = coloShift.shiftBlue\n        this.shiftAlpha = coloShift.shiftAlpha\n    }\n\n    private parseRGBA() {\n        this.data = new Uint8Array(this.width * this.height * 4)\n\n        switch (this.bitPP) {\n            case 1:\n                this.bit1()\n                break\n            case 4:\n                this.bit4()\n                break\n            case 8:\n                this.bit8()\n                break\n            case 16:\n                this.bit16()\n                break\n            case 24:\n                this.bit24()\n                break\n            default:\n                this.bit32()\n        }\n    }\n\n    private bit1() {\n        const xLen = Math.ceil(this.width / 8)\n        const mode = xLen % 4\n        const padding = mode !== 0 ? 4 - mode : 0\n\n        let lastLine: number | undefined\n\n        this.scanImage(padding, xLen, (x, line) => {\n            if (line !== lastLine) {\n                lastLine = line\n            }\n\n            const b = this.bufferView.getUint8(this.pos++)\n            const location = line * this.width * 4 + x * 8 * 4\n\n            for (let i = 0; i < 8; i++) {\n                if (x * 8 + i < this.width) {\n                    const rgb = this.palette[(b >> (7 - i)) & 0x1]\n\n                    this.data[location + i * 4 + this.locAlpha] = 0xff\n                    this.data[location + i * 4 + this.locBlue] = rgb.blue\n                    this.data[location + i * 4 + this.locGreen] = rgb.green\n                    this.data[location + i * 4 + this.locRed] = rgb.red\n                } else {\n                    break\n                }\n            }\n        })\n    }\n\n    private bit4() {\n        if (this.compression === Compression.BI_RLE4) {\n            this.data.fill(0)\n\n            let lowNibble = false //for all count of pixel\n            let lines = this.bottomUp ? this.height - 1 : 0\n            let location = 0\n\n            while (location < this.data.length) {\n                const a = this.bufferView.getUint8(this.pos++)\n                const b = this.bufferView.getUint8(this.pos++)\n\n                //absolute mode\n                if (a === 0) {\n                    if (b === 0) {\n                        //line end\n                        lines += this.bottomUp ? -1 : 1\n                        location = lines * this.width * 4\n                        lowNibble = false\n\n                        continue\n                    }\n\n                    if (b === 1) {\n                        // image end\n                        break\n                    }\n\n                    if (b === 2) {\n                        // offset x, y\n                        const x = this.bufferView.getUint8(this.pos++)\n                        const y = this.bufferView.getUint8(this.pos++)\n\n                        lines += this.bottomUp ? -y : y\n                        location += y * this.width * 4 + x * 4\n                    } else {\n                        let c = this.bufferView.getUint8(this.pos++)\n\n                        for (let i = 0; i < b; i++) {\n                            location = this.setPixelData(\n                                location,\n                                lowNibble ? c & 0x0f : (c & 0xf0) >> 4,\n                            )\n\n                            if (i & 1 && i + 1 < b) {\n                                c = this.bufferView.getUint8(this.pos++)\n                            }\n\n                            lowNibble = !lowNibble\n                        }\n\n                        if ((((b + 1) >> 1) & 1) === 1) {\n                            this.pos++\n                        }\n                    }\n                } else {\n                    //encoded mode\n                    for (let i = 0; i < a; i++) {\n                        location = this.setPixelData(\n                            location,\n                            lowNibble ? b & 0x0f : (b & 0xf0) >> 4,\n                        )\n                        lowNibble = !lowNibble\n                    }\n                }\n            }\n        } else {\n            const xLen = Math.ceil(this.width / 2)\n            const mode = xLen % 4\n            const padding = mode !== 0 ? 4 - mode : 0\n\n            this.scanImage(padding, xLen, (x, line) => {\n                const b = this.bufferView.getUint8(this.pos++)\n                const location = line * this.width * 4 + x * 2 * 4\n\n                const first4 = b >> 4\n                let rgb = this.palette[first4]\n\n                this.data[location + this.locAlpha] = 0xff\n                this.data[location + this.locBlue] = rgb.blue\n                this.data[location + this.locGreen] = rgb.green\n                this.data[location + this.locRed] = rgb.red\n\n                if (x * 2 + 1 >= this.width) {\n                    // throw new Error('Something');\n                    return\n                }\n\n                const last4 = b & 0x0f\n                rgb = this.palette[last4]\n\n                this.data[location + 4 + this.locAlpha] = 0xff\n                this.data[location + 4 + this.locBlue] = rgb.blue\n                this.data[location + 4 + this.locGreen] = rgb.green\n                this.data[location + 4 + this.locRed] = rgb.red\n            })\n        }\n    }\n\n    private bit8() {\n        if (this.compression === Compression.BI_RLE8) {\n            this.data.fill(0)\n\n            let lines = this.bottomUp ? this.height - 1 : 0\n            let location = 0\n\n            while (location < this.data.length) {\n                const a = this.bufferView.getUint8(this.pos++)\n                const b = this.bufferView.getUint8(this.pos++)\n\n                //absolute mode\n                if (a === 0) {\n                    if (b === 0) {\n                        //line end\n                        lines += this.bottomUp ? -1 : 1\n                        location = lines * this.width * 4\n                        continue\n                    }\n\n                    if (b === 1) {\n                        //image end\n                        break\n                    }\n\n                    if (b === 2) {\n                        //offset x,y\n                        const x = this.bufferView.getUint8(this.pos++)\n                        const y = this.bufferView.getUint8(this.pos++)\n\n                        lines += this.bottomUp ? -y : y\n                        location += y * this.width * 4 + x * 4\n                    } else {\n                        for (let i = 0; i < b; i++) {\n                            const c = this.bufferView.getUint8(this.pos++)\n                            location = this.setPixelData(location, c)\n                        }\n\n                        // @ts-ignore\n                        const shouldIncrement = b & (1 === 1)\n                        if (shouldIncrement) {\n                            this.pos++\n                        }\n                    }\n                } else {\n                    //encoded mode\n                    for (let i = 0; i < a; i++) {\n                        location = this.setPixelData(location, b)\n                    }\n                }\n            }\n        } else {\n            const mode = this.width % 4\n            const padding = mode !== 0 ? 4 - mode : 0\n\n            this.scanImage(padding, this.width, (x, line) => {\n                const b = this.bufferView.getUint8(this.pos++)\n                const location = line * this.width * 4 + x * 4\n\n                if (b < this.palette.length) {\n                    const rgb = this.palette[b]\n\n                    this.data[location + this.locAlpha] = 0xff\n                    this.data[location + this.locBlue] = rgb.blue\n                    this.data[location + this.locGreen] = rgb.green\n                    this.data[location + this.locRed] = rgb.red\n                }\n            })\n        }\n    }\n\n    private bit16() {\n        const padding = (this.width % 2) * 2\n\n        this.scanImage(padding, this.width, (x, line) => {\n            const loc = line * this.width * 4 + x * 4\n            const px = this.bufferView.getUint16(this.pos, true)\n            this.pos += 2\n\n            this.data[loc + this.locRed] = this.shiftRed(px)\n            this.data[loc + this.locGreen] = this.shiftGreen(px)\n            this.data[loc + this.locBlue] = this.shiftBlue(px)\n            this.data[loc + this.locAlpha] = this.shiftAlpha(px)\n        })\n    }\n\n    private bit24() {\n        const padding = this.width % 4\n\n        this.scanImage(padding, this.width, (x, line) => {\n            const loc = line * this.width * 4 + x * 4\n            const blue = this.bufferView.getUint8(this.pos++)\n            const green = this.bufferView.getUint8(this.pos++)\n            const red = this.bufferView.getUint8(this.pos++)\n\n            this.data[loc + this.locAlpha] = 0xff\n            this.data[loc + this.locBlue] = blue\n            this.data[loc + this.locGreen] = green\n            this.data[loc + this.locRed] = red\n        })\n    }\n\n    private bit32() {\n        this.scanImage(0, this.width, (x, line) => {\n            const loc = line * this.width * 4 + x * 4\n            const px = this.readUInt32LE()\n\n            this.data[loc + this.locAlpha] = this.shiftAlpha(px)\n            this.data[loc + this.locBlue] = this.shiftBlue(px)\n            this.data[loc + this.locGreen] = this.shiftGreen(px)\n            this.data[loc + this.locRed] = this.shiftRed(px)\n        })\n    }\n\n    private scanImage(\n        padding = 0,\n        width = this.width,\n        processPixel: IColorProcessor,\n    ) {\n        for (let y = this.height - 1; y >= 0; y--) {\n            const line = this.bottomUp ? y : this.height - 1 - y\n\n            for (let x = 0; x < width; x++) {\n                processPixel.call(this, x, line)\n            }\n\n            this.pos += padding\n        }\n    }\n\n    private readUInt32LE() {\n        const value = this.bufferView.getUint32(this.pos, true)\n        this.pos += 4\n        return value\n    }\n\n    private setPixelData(location: number, rgbIndex: number) {\n        const {blue, green, red} = this.palette[rgbIndex]\n\n        this.data[location + this.locAlpha] = 0xff\n        this.data[location + this.locBlue] = blue\n        this.data[location + this.locGreen] = green\n        this.data[location + this.locRed] = red\n\n        return location + 4\n    }\n}\n\nexport class BitmapWithPalette extends ImageData {\n    readonly palette: IColor[]\n\n    static decode(bitmapData: DataView): BitmapWithPalette {\n        return new BitmapWithPalette(new BmpDecoder(bitmapData, {toRGBA: true}))\n    }\n\n    constructor(decoder: BmpDecoder) {\n        super(new Uint8ClampedArray(decoder.data), decoder.width, decoder.height)\n        this.palette = decoder.palette\n    }\n\n    applyAlphaByIndex(alphaIndex: number): BitmapWithPalette {\n        if (alphaIndex || alphaIndex === 0) {\n            const fallbackColor = {red: this.data[0], green: this.data[1], blue: this.data[2]} // XXX color not in palette for a102_bigtyre.bmp or a277_head_stud.bmp\n            const alphaColor = this.palette?.[alphaIndex] ?? fallbackColor\n            if (alphaColor) {\n                const data = this.data\n                for (let c = 0; c < data.length; c += 4) {\n                    data[c + 3] = alphaColor.red === data[c] && alphaColor.green === data[c + 1] && alphaColor.blue === data[c + 2] ? 0 : 255\n                }\n            }\n        } else {\n            console.warn(`Invalid alpha index (${alphaIndex}) given`)\n        }\n        return this\n    }\n\n    applyAlpha(): BitmapWithPalette {\n        const data = this.data\n        for (let n = 0; n < data.length; n += 4) {\n            // Interface/Reward/RSoxygen.bmp uses 2/2/2 as \"black\" alpha background\n            // Baz's mod uses 5/2/4 as \"black\" alpha background for level images\n            if (data[n] <= 12 && data[n + 1] <= 12 && data[n + 2] <= 12) {\n                data[n + 3] = 0\n            }\n        }\n        return this\n    }\n\n    applyAlphaTranslucent(): BitmapWithPalette {\n        const data = this.data\n        for (let n = 0; n < data.length; n += 4) {\n            const grey = (data[n] + data[n + 1] + data[n + 2]) / 3\n            data[n + 3] = Math.min(255, grey * 4)\n        }\n        return this\n    }\n}\n","import { TypedWorkerBackend, WorkerRequestMessage, WorkerResponseMessage } from './TypedWorker'\n\nexport abstract class AbstractWorkerSystem<M, R> {\n    constructor(readonly worker: TypedWorkerBackend<WorkerRequestMessage<M>, WorkerResponseMessage<R>>) {\n        worker.onMessageFromFrontend = (msg) => {\n            try {\n                if (msg.request) {\n                    this.onMessageFromFrontend(msg.workerRequestHash, msg.request)\n                } else {\n                    console.warn('Worker received message without request from frontend')\n                }\n            } catch (e) {\n                console.error(e)\n            }\n        }\n    }\n\n    abstract onMessageFromFrontend(workerRequestHash: string, request: M): void\n\n    sendResponse(workerRequestHash: string, response: R, transfer?: Transferable[]) {\n        this.worker.sendResponse({workerRequestHash: workerRequestHash, response: response}, transfer)\n    }\n}\n","import { TypedWorkerThreaded } from './TypedWorker'\nimport { BitmapWithPalette } from '../resource/fileparser/BitmapWithPalette'\nimport { AbstractWorkerSystem } from './AbstractWorkerSystem'\n\nexport const BITMAP_WORKER_REQUEST_TYPE = {\n    decodeBitmap: 1, // start with 1 for truthiness safety\n    decodeBitmapAlpha: 2,\n    decodeBitmapAlphaIndex: 3,\n    decodeBitmapAlphaTranslucent: 4,\n} as const\ntype BitmapWorkerRequestType = typeof BITMAP_WORKER_REQUEST_TYPE[keyof typeof BITMAP_WORKER_REQUEST_TYPE]\n\nexport interface BitmapWorkerRequest {\n    type: BitmapWorkerRequestType\n    bitmapData: ArrayBuffer\n    alphaIndex?: number\n}\n\nexport interface BitmapWorkerResponse {\n    decoded: BitmapWithPalette\n}\n\nexport class BitmapSystem extends AbstractWorkerSystem<BitmapWorkerRequest, BitmapWorkerResponse> {\n    onMessageFromFrontend(workerRequestHash: string, request: BitmapWorkerRequest): void {\n        const decoded = BitmapWithPalette.decode(new DataView(request.bitmapData))\n        switch (request.type) {\n            case BITMAP_WORKER_REQUEST_TYPE.decodeBitmap:\n                this.sendResponse(workerRequestHash, {decoded: decoded})\n                break\n            case BITMAP_WORKER_REQUEST_TYPE.decodeBitmapAlpha:\n                this.sendResponse(workerRequestHash, {decoded: decoded.applyAlpha()})\n                break\n            case BITMAP_WORKER_REQUEST_TYPE.decodeBitmapAlphaIndex:\n                if (request.alphaIndex === undefined || request.alphaIndex === null) {\n                    console.error(`No alpha index given for bitmap decode request`)\n                    return\n                }\n                this.sendResponse(workerRequestHash, {decoded: decoded.applyAlphaByIndex(request.alphaIndex)})\n                break\n            case BITMAP_WORKER_REQUEST_TYPE.decodeBitmapAlphaTranslucent:\n                this.sendResponse(workerRequestHash, {decoded: decoded.applyAlphaTranslucent()})\n                break\n        }\n    }\n}\n\nconst worker: Worker = self as any\nnew BitmapSystem(new TypedWorkerThreaded(worker))\n"],"names":["TypedWorkerThreaded","worker","event","response","transfer","HEADER_TYPE","isHeaderType","val","maskColor","maskRed","maskGreen","maskBlue","maskAlpha","maskRedR","maskGreenR","maskBlueR","maskAlphaR","shiftedMaskRedL","shiftedMaskGreenL","shiftedMaskBlueL","shiftedMaskAlphaL","x","Compression","isCompression","BmpDecoder","bufferView","toRGBA","headerSize","compression","len","i","blue","green","red","quad","coloShift","xLen","mode","padding","line","b","location","rgb","lowNibble","lines","a","y","c","first4","last4","loc","px","width","processPixel","value","rgbIndex","BitmapWithPalette","bitmapData","decoder","alphaIndex","fallbackColor","alphaColor","data","n","grey","AbstractWorkerSystem","msg","workerRequestHash","BITMAP_WORKER_REQUEST_TYPE","BitmapSystem","request","decoded"],"mappings":"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"}