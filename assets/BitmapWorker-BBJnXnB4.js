(function(){"use strict";class m{constructor(t){this.worker=t,t.addEventListener("message",s=>this.onMessageFromFrontend(s?.data))}onMessageFromFrontend=()=>{throw new Error("Not implemented")};sendResponse(t,s){this.worker.postMessage(t,s)}}const l={BitmapInfoHeader:40,BitmapV2InfoHeader:52,BitmapV3InfoHeader:56,BitmapV4Header:108,BitmapV5Header:124},w=d=>Object.values(l).includes(d);function g(d,t,s,e){const i=~d+1&d,h=~t+1&t,a=~s+1&s,o=~e+1&e,r=d/i+1,n=t/h+1,b=s/a+1,V=e/o+1;return{shiftRed:c=>(c&d)/i*256/r,shiftGreen:c=>(c&t)/h*256/n,shiftBlue:c=>(c&s)/a*256/b,shiftAlpha:e!==0?c=>(c&e)/o*256/V:()=>255}}const p={NONE:0,BI_RLE8:1,BI_RLE4:2,BI_BIT_FIELDS:3,BI_ALPHA_BIT_FIELDS:6},B=d=>Object.values(p).includes(d);class U{constructor(t,{toRGBA:s}={toRGBA:!1}){if(this.bufferView=t,this.toRGBA=!!s,this.bottomUp=!0,this.flag=String.fromCharCode(this.bufferView.getUint8(0),this.bufferView.getUint8(1)),this.pos=2,this.flag!=="BM")throw new Error("Invalid BMP File");this.locRed=this.toRGBA?0:3,this.locGreen=this.toRGBA?1:2,this.locBlue=this.toRGBA?2:1,this.locAlpha=this.toRGBA?3:0,this.parseHeader(),this.parseRGBA()}flag;fileSize;reserved1;reserved2;offset;headerSize;width;height;planes;bitPP;compression;rawSize;hr;vr;colors;importantColors;palette;data;maskRed;maskGreen;maskBlue;maskAlpha;toRGBA;pos;bottomUp;locRed;locGreen;locBlue;locAlpha;shiftRed;shiftGreen;shiftBlue;shiftAlpha;parseHeader(){this.fileSize=this.readUInt32LE(),this.reserved1=this.bufferView.getUint16(this.pos,!0),this.pos+=2,this.reserved2=this.bufferView.getUint16(this.pos,!0),this.pos+=2,this.offset=this.readUInt32LE();const t=this.readUInt32LE();if(!w(t))throw new Error(`Unsupported BMP header size ${t}`);this.headerSize=t,this.width=this.readUInt32LE(),this.height=this.readUInt32LE(),this.planes=this.bufferView.getUint16(this.pos,!0),this.pos+=2,this.bitPP=this.bufferView.getUint16(this.pos,!0),this.pos+=2;const s=this.readUInt32LE();if(!B(s))throw new Error(`Unsupported BMP compression ${s}`);if(this.compression=s,this.rawSize=this.readUInt32LE(),this.hr=this.readUInt32LE(),this.vr=this.readUInt32LE(),this.colors=this.readUInt32LE(),this.importantColors=this.readUInt32LE(),this.bitPP===32?(this.maskAlpha=0,this.maskRed=16711680,this.maskGreen=65280,this.maskBlue=255):this.bitPP===16&&(this.maskAlpha=0,this.maskRed=31744,this.maskGreen=992,this.maskBlue=31),(this.headerSize>l.BitmapInfoHeader||this.compression===p.BI_BIT_FIELDS||this.compression===p.BI_ALPHA_BIT_FIELDS)&&(this.maskRed=this.readUInt32LE(),this.maskGreen=this.readUInt32LE(),this.maskBlue=this.readUInt32LE()),(this.headerSize>l.BitmapV2InfoHeader||this.compression===p.BI_ALPHA_BIT_FIELDS)&&(this.maskAlpha=this.readUInt32LE()),this.headerSize>l.BitmapV3InfoHeader&&(this.pos+=l.BitmapV4Header-l.BitmapV3InfoHeader),this.headerSize>l.BitmapV4Header&&(this.pos+=l.BitmapV5Header-l.BitmapV4Header),this.bitPP<=8||this.colors>0){const i=this.colors===0?1<<this.bitPP:this.colors;this.palette=new Array(i);for(let h=0;h<i;h++){const a=this.bufferView.getUint8(this.pos++),o=this.bufferView.getUint8(this.pos++),r=this.bufferView.getUint8(this.pos++),n=this.bufferView.getUint8(this.pos++);this.palette[h]={red:r,green:o,blue:a,quad:n}}}this.height<0&&(this.height*=-1,this.bottomUp=!1);const e=g(this.maskRed,this.maskGreen,this.maskBlue,this.maskAlpha);this.shiftRed=e.shiftRed,this.shiftGreen=e.shiftGreen,this.shiftBlue=e.shiftBlue,this.shiftAlpha=e.shiftAlpha}parseRGBA(){switch(this.data=new Uint8Array(this.width*this.height*4),this.bitPP){case 1:this.bit1();break;case 4:this.bit4();break;case 8:this.bit8();break;case 16:this.bit16();break;case 24:this.bit24();break;default:this.bit32()}}bit1(){const t=Math.ceil(this.width/8),s=t%4,e=s!==0?4-s:0;this.scanImage(e,t,(i,h)=>{const a=this.bufferView.getUint8(this.pos++),o=h*this.width*4+i*8*4;for(let r=0;r<8&&i*8+r<this.width;r++){const n=this.palette[a>>7-r&1];this.data[o+r*4+this.locAlpha]=255,this.data[o+r*4+this.locBlue]=n.blue,this.data[o+r*4+this.locGreen]=n.green,this.data[o+r*4+this.locRed]=n.red}})}bit4(){if(this.compression===p.BI_RLE4){this.data.fill(0);let t=!1,s=this.bottomUp?this.height-1:0,e=0;for(;e<this.data.length;){const i=this.bufferView.getUint8(this.pos++),h=this.bufferView.getUint8(this.pos++);if(i===0){if(h===0){s+=this.bottomUp?-1:1,e=s*this.width*4,t=!1;continue}if(h===1)break;if(h===2){const a=this.bufferView.getUint8(this.pos++),o=this.bufferView.getUint8(this.pos++);s+=this.bottomUp?-o:o,e+=o*this.width*4+a*4}else{let a=this.bufferView.getUint8(this.pos++);for(let o=0;o<h;o++)e=this.setPixelData(e,t?a&15:(a&240)>>4),o&1&&o+1<h&&(a=this.bufferView.getUint8(this.pos++)),t=!t;(h+1>>1&1)===1&&this.pos++}}else for(let a=0;a<i;a++)e=this.setPixelData(e,t?h&15:(h&240)>>4),t=!t}}else{const t=Math.ceil(this.width/2),s=t%4,e=s!==0?4-s:0;this.scanImage(e,t,(i,h)=>{const a=this.bufferView.getUint8(this.pos++),o=h*this.width*4+i*2*4,r=a>>4;let n=this.palette[r];if(this.data[o+this.locAlpha]=255,this.data[o+this.locBlue]=n.blue,this.data[o+this.locGreen]=n.green,this.data[o+this.locRed]=n.red,i*2+1>=this.width)return;const b=a&15;n=this.palette[b],this.data[o+4+this.locAlpha]=255,this.data[o+4+this.locBlue]=n.blue,this.data[o+4+this.locGreen]=n.green,this.data[o+4+this.locRed]=n.red})}}bit8(){if(this.compression===p.BI_RLE8){this.data.fill(0);let t=this.bottomUp?this.height-1:0,s=0;for(;s<this.data.length;){const e=this.bufferView.getUint8(this.pos++),i=this.bufferView.getUint8(this.pos++);if(e===0){if(i===0){t+=this.bottomUp?-1:1,s=t*this.width*4;continue}if(i===1)break;if(i===2){const h=this.bufferView.getUint8(this.pos++),a=this.bufferView.getUint8(this.pos++);t+=this.bottomUp?-a:a,s+=a*this.width*4+h*4}else{for(let a=0;a<i;a++){const o=this.bufferView.getUint8(this.pos++);s=this.setPixelData(s,o)}i&!0&&this.pos++}}else for(let h=0;h<e;h++)s=this.setPixelData(s,i)}}else{const t=this.width%4,s=t!==0?4-t:0;this.scanImage(s,this.width,(e,i)=>{const h=this.bufferView.getUint8(this.pos++),a=i*this.width*4+e*4;if(h<this.palette.length){const o=this.palette[h];this.data[a+this.locAlpha]=255,this.data[a+this.locBlue]=o.blue,this.data[a+this.locGreen]=o.green,this.data[a+this.locRed]=o.red}})}}bit16(){const t=this.width%2*2;this.scanImage(t,this.width,(s,e)=>{const i=e*this.width*4+s*4,h=this.bufferView.getUint16(this.pos,!0);this.pos+=2,this.data[i+this.locRed]=this.shiftRed(h),this.data[i+this.locGreen]=this.shiftGreen(h),this.data[i+this.locBlue]=this.shiftBlue(h),this.data[i+this.locAlpha]=this.shiftAlpha(h)})}bit24(){const t=this.width%4;this.scanImage(t,this.width,(s,e)=>{const i=e*this.width*4+s*4,h=this.bufferView.getUint8(this.pos++),a=this.bufferView.getUint8(this.pos++),o=this.bufferView.getUint8(this.pos++);this.data[i+this.locAlpha]=255,this.data[i+this.locBlue]=h,this.data[i+this.locGreen]=a,this.data[i+this.locRed]=o})}bit32(){this.scanImage(0,this.width,(t,s)=>{const e=s*this.width*4+t*4,i=this.readUInt32LE();this.data[e+this.locAlpha]=this.shiftAlpha(i),this.data[e+this.locBlue]=this.shiftBlue(i),this.data[e+this.locGreen]=this.shiftGreen(i),this.data[e+this.locRed]=this.shiftRed(i)})}scanImage(t=0,s=this.width,e){for(let i=this.height-1;i>=0;i--){const h=this.bottomUp?i:this.height-1-i;for(let a=0;a<s;a++)e.call(this,a,h);this.pos+=t}}readUInt32LE(){const t=this.bufferView.getUint32(this.pos,!0);return this.pos+=4,t}setPixelData(t,s){const{blue:e,green:i,red:h}=this.palette[s];return this.data[t+this.locAlpha]=255,this.data[t+this.locBlue]=e,this.data[t+this.locGreen]=i,this.data[t+this.locRed]=h,t+4}}class u extends ImageData{palette;static decode(t){return new u(new U(t,{toRGBA:!0}))}constructor(t){super(new Uint8ClampedArray(t.data),t.width,t.height),this.palette=t.palette}applyAlphaByIndex(t){if(t||t===0){const s={red:this.data[0],green:this.data[1],blue:this.data[2]},e=this.palette?.[t]??s;if(e){const i=this.data;for(let h=0;h<i.length;h+=4)i[h+3]=e.red===i[h]&&e.green===i[h+1]&&e.blue===i[h+2]?0:255}}else console.warn(`Invalid alpha index (${t}) given`);return this}applyAlpha(){const t=this.data;for(let s=0;s<t.length;s+=4)t[s]<=12&&t[s+1]<=12&&t[s+2]<=12&&(t[s+3]=0);return this}applyAlphaTranslucent(){const t=this.data;for(let s=0;s<t.length;s+=4){const e=(t[s]+t[s+1]+t[s+2])/3;t[s+3]=Math.min(255,e*4)}return this}}class I{constructor(t){this.worker=t,t.onMessageFromFrontend=s=>{try{s.request?this.onMessageFromFrontend(s.workerRequestHash,s.request):console.warn("Worker received message without request from frontend")}catch(e){console.error(e)}}}sendResponse(t,s,e){this.worker.sendResponse({workerRequestHash:t,response:s},e)}}const f={decodeBitmap:1,decodeBitmapAlpha:2,decodeBitmapAlphaIndex:3,decodeBitmapAlphaTranslucent:4};class A extends I{onMessageFromFrontend(t,s){const e=u.decode(new DataView(s.bitmapData));switch(s.type){case f.decodeBitmap:this.sendResponse(t,{decoded:e});break;case f.decodeBitmapAlpha:this.sendResponse(t,{decoded:e.applyAlpha()});break;case f.decodeBitmapAlphaIndex:if(s.alphaIndex===void 0||s.alphaIndex===null){console.error("No alpha index given for bitmap decode request");return}this.sendResponse(t,{decoded:e.applyAlphaByIndex(s.alphaIndex)});break;case f.decodeBitmapAlphaTranslucent:this.sendResponse(t,{decoded:e.applyAlphaTranslucent()});break}}}const R=self;new A(new m(R))})();
//# sourceMappingURL=BitmapWorker-BBJnXnB4.js.map
